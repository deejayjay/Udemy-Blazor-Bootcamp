@page "/category"
@attribute [Authorize(Roles = SD.Role_Admin)]

@inject ICategoryRepository _categoryRepo
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation OnDeleteClick="ConfirmDeleteClick" IsProcessing="IsLoading"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-8">
        <h2 class="text-primary mb-3 ms-3">Category List</h2>
    </div>
    <div class="col-4 text-end">
        <a class="btn btn-primary" href="category/create">Add New Category</a>
    </div>
    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var category in Categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>
                                <NavLink href="@($"/category/edit/{category.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" type="button" @onclick="() => HandleDelete(category.Id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        } else
        {
            if(IsLoading)
            {
                // Loading gif
                <div class="text-center">
                    <img src="/images/loading.gif" alt="Loading" />
                </div>
            }
            else
            {
                <p>No records found.</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private bool IsLoading { get; set; }
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepo.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task HandleDelete(int id)
    {
        DeleteCategoryId = id;
        await _jsRuntime.InvokeVoidAsync("showDeleteConfirmationModal");
    }

    public async Task ConfirmDeleteClick(bool isConfirmed)
    {
        if (isConfirmed && DeleteCategoryId != 0)
        {
            IsLoading = true;

            // Delete the cateogry
            await _categoryRepo.Delete(DeleteCategoryId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("hideDeleteConfirmationModal");

            IsLoading = false;
        }
    }
}
