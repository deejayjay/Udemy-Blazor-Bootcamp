@page "/product/create"
@page "/product/edit/{id:int}"

@inject ICategoryRepository _categoryRepo
@inject IProductRepository _productRepo
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h2 class="text-primary mb-3">@Title Product</h2>

    <div class="col-md-10">
        @if (IsLoading)
        {
            // Loading gif
            <div class="text-center">
                <img src="/images/loading.gif" alt="Loading" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
                <div class="form-group mb-2">
                    <label for="name" class="form-label">Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control" id="name"></InputText>
                    <ValidationMessage For="()=>Product.Name" />
                </div>
                <div class="form-group mb-2">
                    <label for="color" class="form-label">Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control" id="color"></InputText>
                    <ValidationMessage For="()=>Product.Color" />
                </div>
                <div class="form-group mb-2">
                    <label for="description" class="form-label">Description</label>
                    <SfRichTextEditor @bind-Value="Product.Description" id="description"></SfRichTextEditor>
                    <ValidationMessage For="()=>Product.Description" />
                </div>

                <div class="row pt-3">
                    <div class="form-group col-6 mb-2">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input" id="shopFavorite">
                            </InputCheckbox>
                            <label class="form-check-label" for="shopFavorite">Is Shop Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6 mb-2">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input" id="customerFavorite">
                            </InputCheckbox>
                            <label class="form-check-label" for="customerFavorite">Is Customer Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6 mb-2">
                        <label class="form-label" for="category">Category</label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" selected disabled>--Select Category--</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId" />
                    </div>
                    <div class="form-group col-6 mb-2 pt-4">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="/product" class="btn btn-secondary">Back to List</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" alt="A picture of @Product.Name" class="w-100" />
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/images/default.png"
    };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepo.GetAll();

        if (Id == 0)
        {
            // Create request
            IsLoading = false;
        }
        else
        {
            // Update request
            Title = "Update";
            Product = await _productRepo.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }


        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            // Create new category
            await _productRepo.Create(Product);
            await _jsRuntime.ToastrSuccess("Product created successfully");
        }
        else
        {
            // Update the category
            if (OldImageUrl != Product.ImageUrl)
            {
                await _fileUpload.DeleteFile(OldImageUrl);
            }
            await _productRepo.Update(Product);
            await _jsRuntime.ToastrSuccess("Product updated successfully");
        }
        _navigationManager.NavigateTo("/product");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;

        try
        {
            IReadOnlyList<IBrowserFile> files = e.GetMultipleFiles();
            if (files.Count > 0)
            {
                foreach (var file in files)
                {
                    FileInfo fileInfo = new(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".jpeg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".webp")
                    {
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Only '.jpg, .jpeg, .png & .webp' files allowed");                        
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
